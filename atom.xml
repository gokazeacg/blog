<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不務正業的生機人</title>
  
  <subtitle>不斜槓人生</subtitle>
  <link href="http://gokazeacg.github.io/blog/atom.xml" rel="self"/>
  
  <link href="http://gokazeacg.github.io/blog/"/>
  <updated>2021-04-05T15:26:48.569Z</updated>
  <id>http://gokazeacg.github.io/blog/</id>
  
  <author>
    <name>健弘</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>關於FFMPEG</title>
    <link href="http://gokazeacg.github.io/blog/2021/04/05/%E9%97%9C%E6%96%BCFFMPEG/"/>
    <id>http://gokazeacg.github.io/blog/2021/04/05/%E9%97%9C%E6%96%BCFFMPEG/</id>
    <published>2021-04-05T14:43:38.000Z</published>
    <updated>2021-04-05T15:26:48.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="關於FFMPEG"><a href="#關於FFMPEG" class="headerlink" title="關於FFMPEG"></a>關於FFMPEG</h1><p>注意!本文所使用的環境為Windows10，MacOS以及Linus用戶可以參考，但並不保證運行成功<br>這篇文章是為了記錄研究FFMPEG當中得出的一些心得，而誕生的，其實主要也是為了自己將來如果還要用到的話，有個地方可以看。<br><br><br>不過我自己本身也沒怎麼系統的學習過，只是為了將想要的功能實現而到處去查文獻，也因此走了很多彎路，碰了很多壁，希望這篇文章能夠幫到一些人，當然，如果文章裡面的用法有誤，或者是用詞有所偏差，也歡迎各位不吝賜教。<br>安裝FFMPEG的教學網路上一抓一大把，而且都十分詳盡，主要就是到FFMPEG的 <a href="https://ffmpeg.org/">官網</a> 上將壓縮檔 <a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z">下載</a> (Windows)下來解壓縮，然後在解壓縮出來的資料夾底下找到\BIN\FFMPEG.EXE，在那個資料夾中執行命令提示字元(CMD)就行了。</p><h2 id="基本參數"><a href="#基本參數" class="headerlink" title="基本參數"></a>基本參數</h2><p>第一部分要說的便是基本參數了，也就是輸入、格式選擇以及輸出。</p><h3 id="輸入"><a href="#輸入" class="headerlink" title="輸入"></a>輸入</h3><p>輸入，也就是將想被FFMPEG處理的檔案送進FFMPEG，我們可以將FFMPEG想像成一部機器，輸入就是把將被處裡的物品送進這部機器的手續<br>具體指令為</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\UserName&gt;ffmpeg -i "PUTIN"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="格式選擇"><a href="#格式選擇" class="headerlink" title="格式選擇"></a>格式選擇</h3><p>選擇格式也就是你希望FFMPEG產出的結果是怎樣的，具體來說，如果是影片檔的話格式就會有諸如MP4、MKV、WebP、MOV等等，詳細的列表可以輸入</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\UserName&gt;ffmpeg -formats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看<br>決定想要輸出的格式之後，就可以輸入-f參數，讓FFMPEG明白你想要甚麼格式啦<br>具體指令為</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\UserName&gt;ffmpeg -f "FORMAT"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="輸出"><a href="#輸出" class="headerlink" title="輸出"></a>輸出</h3><p>最後一步就是輸出啦!輸出，顧名思義就是告訴FFMPEG你想要讓它把處理好的檔案放在哪裡，結合上面所說的兩個指令，就是一條完整的FFMPEG指令啦!<br>舉個例子，如果我想要將”D:\Users\Videos\HEHEHE.MKV”轉檔成MP4並輸出至D槽根目錄的HAHAHA.MP4，那我的指令就會像下方那樣</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\UserName&gt;ffmpeg -i "D:\Users\Videos\HEHEHE.MKV" -f MP4 "D:\HAHAHA.MP4"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>實際轉檔</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\a6172&gt;ffmpeg -i "D:\Users\a6172\Videos\HEHEHE.mkv" -f MP4 "D:\HAHAHA.MP4"ffmpeg version 2021-03-28-git-8b2bde0494-essentials_build-www.gyan.dev Copyright (c) 2000-2021 the FFmpeg developers  built with gcc 10.2.0 (Rev6, Built by MSYS2 project)  configuration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-lzma --enable-zlib --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-sdl2 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libaom --enable-libopenjpeg --enable-libvpx --enable-libass --enable-libfreetype --enable-libfribidi --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libmfx --enable-libgme --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libtheora --enable-libvo-amrwbenc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-librubberband  libavutil      56. 72.100 / 56. 72.100  libavcodec     58.135.100 / 58.135.100  libavformat    58. 77.100 / 58. 77.100  libavdevice    58. 14.100 / 58. 14.100  libavfilter     7.111.100 /  7.111.100  libswscale      5. 10.100 /  5. 10.100  libswresample   3. 10.100 /  3. 10.100  libpostproc    55. 10.100 / 55. 10.100Input #0, matroska,webm, from 'D:\Users\a6172\Videos\HEHEHE.mkv':  Metadata:    ENCODER         : Lavf58.29.100  Duration: 00:01:37.10, start: 0.000000, bitrate: 10100 kb/s  Stream #0:0: Video: h264 (High), yuv420p(tv, bt709, progressive), 1920x1080 [SAR 1:1 DAR 16:9], 60 fps, 60 tbr, 1k tbn, 120 tbc (default)    Metadata:      DURATION        : 00:01:37.100000000  Stream #0:1: Audio: aac (LC), 48000 Hz, stereo, fltp (default)    Metadata:      title           : Track1      DURATION        : 00:01:37.045000000Stream mapping:  Stream #0:0 -&gt; #0:0 (h264 (native) -&gt; h264 (libx264))  Stream #0:1 -&gt; #0:1 (aac (native) -&gt; aac (native))Press [q] to stop, [?] for help[libx264 @ 0000023d2d8c07c0] using SAR=1/1[libx264 @ 0000023d2d8c07c0] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2[libx264 @ 0000023d2d8c07c0] profile High, level 4.2, 4:2:0, 8-bit[libx264 @ 0000023d2d8c07c0] 264 - core 161 r3048 b86ae3c - H.264/MPEG-4 AVC codec - Copyleft 2003-2021 - http://www.videolan.org/x264.html - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=6 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=23.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00Output #0, mp4, to 'D:\HAHAHA.MP4':  Metadata:    encoder         : Lavf58.77.100  Stream #0:0: Video: h264 (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 1920x1080 [SAR 1:1 DAR 16:9], q=2-31, 60 fps, 15360 tbn (default)    Metadata:      DURATION        : 00:01:37.100000000      encoder         : Lavc58.135.100 libx264    Side data:      cpb: bitrate max/min/avg: 0/0/0 buffer size: 0 vbv_delay: N/A  Stream #0:1: Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)    Metadata:      title           : Track1      DURATION        : 00:01:37.045000000      encoder         : Lavc58.135.100 aacframe= 5826 fps= 25 q=-1.0 Lsize=   42835kB time=00:01:37.05 bitrate=3615.7kbits/s dup=1 drop=0 speed=0.42xvideo:41153kB audio:1533kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.349416%[libx264 @ 0000023d2d8c07c0] frame I:26    Avg QP:18.83  size: 56392[libx264 @ 0000023d2d8c07c0] frame P:2022  Avg QP:23.33  size: 13392[libx264 @ 0000023d2d8c07c0] frame B:3778  Avg QP:26.12  size:  3598[libx264 @ 0000023d2d8c07c0] consecutive B-frames:  6.9% 13.6% 18.9% 60.6%[libx264 @ 0000023d2d8c07c0] mb I  I16..4: 22.4% 63.9% 13.8%[libx264 @ 0000023d2d8c07c0] mb P  I16..4:  6.9% 18.7%  1.4%  P16..4: 15.8%  2.4%  1.0%  0.0%  0.0%    skip:53.7%[libx264 @ 0000023d2d8c07c0] mb B  I16..4:  0.6%  0.9%  0.1%  B16..8: 16.2%  1.4%  0.2%  direct: 1.3%  skip:79.5%  L0:43.1% L1:51.2% BI: 5.7%[libx264 @ 0000023d2d8c07c0] 8x8 transform intra:68.0% inter:81.5%[libx264 @ 0000023d2d8c07c0] coded y,uvDC,uvAC intra: 16.3% 26.5% 3.7% inter: 2.7% 4.1% 0.1%[libx264 @ 0000023d2d8c07c0] i16 v,h,dc,p: 34% 40% 10% 17%[libx264 @ 0000023d2d8c07c0] i8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 35% 17% 34%  3%  3%  3%  3%  2%  2%[libx264 @ 0000023d2d8c07c0] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 29% 21% 20%  5%  7%  5%  6%  4%  3%[libx264 @ 0000023d2d8c07c0] i8c dc,h,v,p: 62% 19% 16%  2%[libx264 @ 0000023d2d8c07c0] Weighted P-Frames: Y:4.5% UV:3.6%[libx264 @ 0000023d2d8c07c0] ref P L0: 67.1% 11.4% 14.6%  6.7%  0.1%[libx264 @ 0000023d2d8c07c0] ref B L0: 87.6% 10.0%  2.5%[libx264 @ 0000023d2d8c07c0] ref B L1: 97.5%  2.5%[libx264 @ 0000023d2d8c07c0] kb/s:3471.88[aac @ 0000023d2d0a2c80] Qavg: 193.943<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是最基本的FFMPEG指令，下一篇會寫關於使用INTEL GPU進行硬體加速，也就是利用QSV來使轉檔速度翻倍且降低CPU使用率的教學。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;關於FFMPEG&quot;&gt;&lt;a href=&quot;#關於FFMPEG&quot; class=&quot;headerlink&quot; title=&quot;關於FFMPEG&quot;&gt;&lt;/a&gt;關於FFMPEG&lt;/h1&gt;&lt;p&gt;注意!本文所使用的環境為Windows10，MacOS以及Linus用戶可以參考，但並不保證</summary>
      
    
    
    
    <category term="影音處理" scheme="http://gokazeacg.github.io/blog/categories/%E5%BD%B1%E9%9F%B3%E8%99%95%E7%90%86/"/>
    
    
    <category term="FFMPEG" scheme="http://gokazeacg.github.io/blog/tags/FFMPEG/"/>
    
  </entry>
  
</feed>
